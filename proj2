import yfinance as yf
import sqlite3
import pandas as pd

def get_all_tickers():
    """Fetch a broad list of tickers from Yahoo Finance (using S&P 500 as an example)."""
    sp500_tickers = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")[0]["Symbol"].tolist()
    return sp500_tickers

def fetch_beta_values(tickers):
    stocks = []
    for ticker in tickers:
        try:
            stock = yf.Ticker(ticker)
            stock_info = stock.info
            beta = stock_info.get("beta", None)
            last_price = stock_info.get("last_price", stock.history(period="1d")["Close"].iloc[-1] if not stock.history(period="1d").empty else None)

            if beta is not None and last_price is not None:
                risk_category = classify_risk(beta)
                stocks.append((ticker, beta, last_price, risk_category))
        
        except Exception as e:
            print(f"Error fetching data for {ticker}: {e}")

    store_in_db(stocks)
    print("Data successfully stored in database!")

def classify_risk(beta):
    if beta < 1.0:
        return "Low Risk"
    elif beta == 1.0:
        return "Moderate Risk"
    else:
        return "High Risk"

def store_in_db(stocks):
    conn = sqlite3.connect("betavalue.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS stock_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            stock_ticker TEXT,
            beta_value REAL,
            stock_price REAL,
            risk_category TEXT
        )
    """)
    cursor.executemany("INSERT INTO stock_data (stock_ticker, beta_value, stock_price, risk_category) VALUES (?, ?, ?, ?)", stocks)
    conn.commit()
    conn.close()

if __name__ == "__main__":
    tickers = get_all_tickers()  # Fetch all available stock symbols (S&P 500 as an example)
    fetch_beta_values(tickers)
